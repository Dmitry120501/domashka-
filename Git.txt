1) Что такое Git? Для чего он нужен?
Git - распределенная система контроля изменений (версий), или консольная утилита (это программа или приложение работа с которой осуществляется с помощью командной строки (консоли)), для отслеживания и ведения истории изменения файлов.
С помощью Git вы можете откатить свой проект до более старой версии, сравнивать, анализировать или сливать свои изменения в репозиторий.
Репозиторием называют хранилище вашего кода и историю его изменений.

2) Что такое репозиторий, ветка, коммит, index, HEAD?
Репозиторий (Repository) - это хранилище вашего кода и историю его изменений.

Ветка (Branch) — набор коммитов. Пространство где храниться какое либо изменение кода, также называемое ссылкой (reference).

Коммит (Commit) - это сохранение изменений.

Индекс (index) - это специальная промежуточная область, в которой хранятся изменения файлов на пути от рабочей директории до репозитория. При выполнении коммита в него попадают только те изменения, которые были добавлены в индекс.

HEAD - ссылка на последний коммит, сделанный ветке. Это значит, что HEAD будет родителем следующего созданного коммита.


3) Опишите два способа создания репозитория. Что такое origin? Как это посмотреть? Как поменять адрес на другой?
1. git init (прописать в терменале находясь в папке с нужными файлами кода, при этом создается скрытая папка .git) после ;
2. Через сайта Git Hub. Далее в терменале приписать git clone <ссылка на репозиторий> <имя папки> (создаться папка, в которую клонируется созданный на сайте репозиторий);

origin - это имя удаленного репозитория, в котором вы хотите публиковать свои коммиты.

Для просмотра:
git remote (для просмотра имени; Выведет: origin);
git remote show origin (для просмотра подробной информации, которая храниться в origin);

git remote -v (еще одна команда для просмотра).

Для изменения адреса репозитория, нужно:
cd /<имяпапки> (перейти в папку с репозиторием)
git remote set-url -add <имя репозитория> <ссылка на репозиторий> (изменяем адрес; обычно за <имя репозитория> принимается origin).

4) Где в этом проекте хранятся все данные для работы git?
Папка .git

5) Как проиндексировать изменения? Как отменить проиндексированные изменения? Как отменить не проиндексированные изменения?
git add (индексация изменений, по мы сообщаем гиту, что готовы сохранить новые изменения);
git add . (прекурсивно добавляет весь каталог, включая скрытые файлы);
git add -A (помечает все файлы во всех папках, которые все еще принадлежат тому же репозиторию);

git reset HEAD (отмена проиндексированных изменений);

git checkout <имя файла> (отмена не проиндексированных изменений).

6) Как посмотреть какие файлы будут добавлены в новый коммит?
После команды git add пишем команду git status или git div.

7) Как создать коммит? Как добавить коммиту сообщение? Как изменить последний коммит (например сообщение)?
git commit (создание коммитов, при этом отроется текстовый редактор, где вас попросят написать комментарий);
git commit -m "text" (добавление коммиту сообщение);

git commit --amend -m "text1" (изменение сообщение коммита).

8) Что такое файл .gitignore? Какие файлы и папки нужно в него добавлять и зачем?
Текстовый фаил .gitignore нужен для скрытия файлов и папок от системы контроля версий Git. Обычно скрывают конфигурационные файлы (особенно с паролями), временные файли и папки. Данный фаил находится в корневом каталоге репозитория. В данный фаил прописываются названия файлов и папок, которые мы хотим скрыть.

Игнорируемые файлы (фалы которые нужно в него прописать) — это, как правило системные файлы, файлы с паролями, нод модули, конфигурационные файлы, либо файлы, которые по какой-либо иной причине не должны попадать в коммиты.
Например: node_modules, packages;


9) Что делать, если файл с конфигурацией (например ключами от облачных сервисов) попал в индекс? попал в удаленный репозиторий?
git rm --cached <file> - удаление файла из индекса (но фаил не удаляется физически);

Чтобы удалить из репозитория:
git reset --mixed <hash> - используется по умолчанию, просто преход на другой коммит, изменения не индексируются.
git reset --soft <hash> - предыдущие изменения (коммиты) переносятся в индекс;
git reset --hard <hash> - откатываемся до коммита, перед которым был коммит с лишним файлом (предыдушие коммиты полностью удаляются как и индексы и файлы);
Помещаем фаил в .gitignor;
git add -A
git commit
git push <имя репозитория> <имяветки>

10) Как удалить файлы из проекта (репозитория)? В чем отличия от стандартного удаления файлов в системе? 
git rm <file> - удалит фаил локально и из проекта;
Отличие в том что rm удаляет полностью фаил, что от него не остаются и следа. А если удалить фаил просто через систему, то он почается как удаленный, и гит его все равно видит, ведь гит видит измененные, добавленные и удаленные фалы).

11) Как заполнить информацию об авторе коммитов для локального репозитория? Как сделать так чтобы это происходило во всех новых проектах, где это не задано локально?
git config --local user.name <имяпользователя>
git config --local user.email <почтапользователя>

git config --global user.name <имяпользователя>
git config --global user.email <почтапользователя>

--local - для конфигурации на локальном уровне (для одного определенного репозитория в одном аккаунте операционной системы);
--global - конфигурации на глобальном уровне (применяется в целом для пользователя операционной системы, и задается всем создаваемым репозиториям на данном аккаунте);
--system - для конфигурации на системном уровне (применяется полностью на весь компьютер и дня всех пользователей операционной системы на даFнном компьютере).

12) Как залить наши новые коммиты в удаленный репозиторий? Когда использовать флаг --force?
git push <имя репозитория> <имяветки>
git push --force <имя репозитория> <имяветки> (Принудительная команда push при исправлении коммитов, используется после изменения коммита)

13) Как подтянуть свежие изменения с удаленного репозитория?
git fetch - собирает все коммиты из главной ветки, которых нет в текущей ветке, и сохраняет их в локальном репозитории.
git pull - автоматически вносит все изменения из главной ветки в текущую ветку (содержит в себе комбинацию команд git fetch и git merge);

14) Как создать ветку (2 способа)? 
1. git checkout -b <имяветки> (является набором команд: git branch <имяветки> за которым идет git checkout <имяветки>);
2. git branch <имяветки>

15) Как перейти из одной ветки в другую ветку?
git checkout <имяветки>

16) Как посмотреть список веток и в какой мы сейчас находимся?
git branch (для просмотра списка локальных веток);
Ветка в который мы сейчас  находимся помечается знаком *;
git branch -r (для просмотра списка удаленных веток);
git branch -a (для просмотра списка локальных и удаленных веток);
git hist -a (для просмотра отличающихся веток (веток и их отличий)).

17) Как соединять ветки? Почему возникают конфликты и как их решать?
Переходим в ветку, которую хотим соединить с другой (git checkout <имяветки1>)
git merge <имяветки2> (сливаем ветку <имяветки2> в <имяветки1>).

Конфликты возникают если в одну из соединенных веток сделать коммит, которо нет в другой или когда в двух ветках была изменена одна и та же строка в файле или когда некий файл удален в одной ветке и отредактирован в другой и тд.

Для разрешения конфликто достаточно версии кода в разных ветка привести к одинаковой версии и после этого запушить сделаные изменения.

18) Как сбрасывать изменения? Как откатываться до какого-нибудь коммита?
git checkout -- <имя файла> - сброс изменений в файле;
git checkout -f <имя файла> - сброс изменений в файле;

Откат до коммита:
Переходим на ветку в который хотим сбросить изменения (git checkout <имяветки>);
git reset --mixed HEAD - используется по умолчанию, просто преход на другой коммит, изменения не индексируются.
git reset --soft HEAD - предыдущие изменения (коммиты) переносятся в индекс;
git reset --hard HEAD - предыдушие коммиты полностью удаляются как и индексы и файлы;

19) Как посмотреть историю коммитов?
git hist
git log - показывает историю коммитов (список коммитов ветки, в которой вы находитесь)
git log -p - показывает историю коммитов с разницей между ними
git log -stat - сокращенная статистика по коммитам

20) Как удалить ветку локально? Как удалить ветку в удаленном (от слова дальний, а не удалять) репозитории.
Нужно сначала выйти с ветки, которую хотите удалить;
git branch -d <имяветки> - для удаления локальной ветки (только если она смерджина с какой-то из веток);
git branch -D <имяветки> - для удаления локальной ветки (удаление ветки независимо от ее статуса);

git push <имя репозитория> -d <имя ветки> - удаление удаленной ветки (<имярепозитория> - это в большенстве случаев origin).
